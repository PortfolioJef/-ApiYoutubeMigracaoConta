using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System;
using System.Collections.Generic;
using System.Globalization;

// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using Google.Apis.YouTube.Samples.Models;
//
//    var playlist = Playlist.FromJson(jsonString);

namespace Google.Apis.YouTube.Samples.Models
{


    //public partial class PlaylistUtil
    //{
    //    [JsonProperty("contentDetails")]
    //    public ContentDetails ContentDetails { get; set; }

    //    [JsonProperty("etag")]
    //    public string Etag { get; set; }

    //    [JsonProperty("id")]
    //    public string Id { get; set; }

    //    [JsonProperty("kind")]
    //    public PlaylistKind Kind { get; set; }

    //    [JsonProperty("snippet")]
    //    public Snippet Snippet { get; set; }

    //    [JsonProperty("status", NullValueHandling = NullValueHandling.Ignore)]
    //    public Status Status { get; set; }
    //}

    //public partial class ContentDetails
    //{
    //    [JsonProperty("videoId")]
    //    public string VideoId { get; set; }

    //    [JsonProperty("videoPublishedAt", NullValueHandling = NullValueHandling.Ignore)]
    //    public DateTimeOffset? VideoPublishedAt { get; set; }
    //}

    //public partial class Snippet
    //{
    //    [JsonProperty("channelId")]
    //    public ChannelId ChannelId { get; set; }

    //    [JsonProperty("channelTitle")]
    //    public ChannelTitle ChannelTitle { get; set; }

    //    [JsonProperty("description")]
    //    public string Description { get; set; }

    //    [JsonProperty("playlistId")]
    //    public PlaylistId PlaylistId { get; set; }

    //    [JsonProperty("position")]
    //    public long Position { get; set; }

    //    [JsonProperty("publishedAt")]
    //    public DateTimeOffset PublishedAt { get; set; }

    //    [JsonProperty("resourceId")]
    //    public ResourceId ResourceId { get; set; }

    //    [JsonProperty("thumbnails", NullValueHandling = NullValueHandling.Ignore)]
    //    public Thumbnails Thumbnails { get; set; }

    //    [JsonProperty("title")]
    //    public string Title { get; set; }
    //}

    //public partial class ResourceId
    //{
    //    [JsonProperty("kind")]
    //    public ResourceIdKind Kind { get; set; }

    //    [JsonProperty("videoId")]
    //    public string VideoId { get; set; }
    //}

    //public partial class Thumbnails
    //{
    //    [JsonProperty("default")]
    //    public Default Default { get; set; }

    //    [JsonProperty("high")]
    //    public Default High { get; set; }

    //    [JsonProperty("medium")]
    //    public Default Medium { get; set; }

    //    [JsonProperty("maxres", NullValueHandling = NullValueHandling.Ignore)]
    //    public Default Maxres { get; set; }

    //    [JsonProperty("standard", NullValueHandling = NullValueHandling.Ignore)]
    //    public Default Standard { get; set; }
    //}

    //public partial class Default
    //{
    //    [JsonProperty("height")]
    //    public long Height { get; set; }

    //    [JsonProperty("url")]
    //    public Uri Url { get; set; }

    //    [JsonProperty("width")]
    //    public long Width { get; set; }
    //}

    //public partial class Status
    //{
    //    [JsonProperty("privacyStatus")]
    //    public PrivacyStatus PrivacyStatus { get; set; }
    //}

    public enum PlaylistKind { YoutubePlaylistItem };

    public enum ChannelId { UCzPmDkttiQhYrta1Gpc2Tbg };

    public enum ChannelTitle { DonoDeMareaJeferson };

    public enum PlaylistId { LLzPmDkttiQhYrta1Gpc2Tbg };

    public enum ResourceIdKind { YoutubeVideo };

    public enum PrivacyStatus { Private, Public, Unlisted };

    public partial class PlaylistUtil
    {
        public static List<PlaylistUtil> FromJson(string json) => JsonConvert.DeserializeObject<List<PlaylistUtil>>(json, Google.Apis.YouTube.Samples.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<PlaylistUtil> self) => JsonConvert.SerializeObject(self, Google.Apis.YouTube.Samples.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                PlaylistKindConverter.Singleton,
                ChannelIdConverter.Singleton,
                ChannelTitleConverter.Singleton,
                PlaylistIdConverter.Singleton,
                ResourceIdKindConverter.Singleton,
                PrivacyStatusConverter.Singleton,
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class PlaylistKindConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PlaylistKind) || t == typeof(PlaylistKind?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "youtube#playlistItem")
            {
                return PlaylistKind.YoutubePlaylistItem;
            }
            throw new Exception("Cannot unmarshal type PlaylistKind");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PlaylistKind)untypedValue;
            if (value == PlaylistKind.YoutubePlaylistItem)
            {
                serializer.Serialize(writer, "youtube#playlistItem");
                return;
            }
            throw new Exception("Cannot marshal type PlaylistKind");
        }

        public static readonly PlaylistKindConverter Singleton = new PlaylistKindConverter();
    }

    internal class ChannelIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ChannelId) || t == typeof(ChannelId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "UCzPmDKTTIQhYRTA1gpc2Tbg")
            {
                return ChannelId.UCzPmDkttiQhYrta1Gpc2Tbg;
            }
            throw new Exception("Cannot unmarshal type ChannelId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ChannelId)untypedValue;
            if (value == ChannelId.UCzPmDkttiQhYrta1Gpc2Tbg)
            {
                serializer.Serialize(writer, "UCzPmDKTTIQhYRTA1gpc2Tbg");
                return;
            }
            throw new Exception("Cannot marshal type ChannelId");
        }

        public static readonly ChannelIdConverter Singleton = new ChannelIdConverter();
    }

    internal class ChannelTitleConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ChannelTitle) || t == typeof(ChannelTitle?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "DonoDeMarea Jeferson")
            {
                return ChannelTitle.DonoDeMareaJeferson;
            }
            throw new Exception("Cannot unmarshal type ChannelTitle");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ChannelTitle)untypedValue;
            if (value == ChannelTitle.DonoDeMareaJeferson)
            {
                serializer.Serialize(writer, "DonoDeMarea Jeferson");
                return;
            }
            throw new Exception("Cannot marshal type ChannelTitle");
        }

        public static readonly ChannelTitleConverter Singleton = new ChannelTitleConverter();
    }

    internal class PlaylistIdConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PlaylistId) || t == typeof(PlaylistId?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "LLzPmDKTTIQhYRTA1gpc2Tbg")
            {
                return PlaylistId.LLzPmDkttiQhYrta1Gpc2Tbg;
            }
            throw new Exception("Cannot unmarshal type PlaylistId");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PlaylistId)untypedValue;
            if (value == PlaylistId.LLzPmDkttiQhYrta1Gpc2Tbg)
            {
                serializer.Serialize(writer, "LLzPmDKTTIQhYRTA1gpc2Tbg");
                return;
            }
            throw new Exception("Cannot marshal type PlaylistId");
        }

        public static readonly PlaylistIdConverter Singleton = new PlaylistIdConverter();
    }

    internal class ResourceIdKindConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(ResourceIdKind) || t == typeof(ResourceIdKind?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            if (value == "youtube#video")
            {
                return ResourceIdKind.YoutubeVideo;
            }
            throw new Exception("Cannot unmarshal type ResourceIdKind");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (ResourceIdKind)untypedValue;
            if (value == ResourceIdKind.YoutubeVideo)
            {
                serializer.Serialize(writer, "youtube#video");
                return;
            }
            throw new Exception("Cannot marshal type ResourceIdKind");
        }

        public static readonly ResourceIdKindConverter Singleton = new ResourceIdKindConverter();
    }

    internal class PrivacyStatusConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(PrivacyStatus) || t == typeof(PrivacyStatus?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            switch (value)
            {
                case "private":
                    return PrivacyStatus.Private;
                case "public":
                    return PrivacyStatus.Public;
                case "unlisted":
                    return PrivacyStatus.Unlisted;
            }
            throw new Exception("Cannot unmarshal type PrivacyStatus");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (PrivacyStatus)untypedValue;
            switch (value)
            {
                case PrivacyStatus.Private:
                    serializer.Serialize(writer, "private");
                    return;
                case PrivacyStatus.Public:
                    serializer.Serialize(writer, "public");
                    return;
                case PrivacyStatus.Unlisted:
                    serializer.Serialize(writer, "unlisted");
                    return;
            }
            throw new Exception("Cannot marshal type PrivacyStatus");
        }

        public static readonly PrivacyStatusConverter Singleton = new PrivacyStatusConverter();
    }
}
